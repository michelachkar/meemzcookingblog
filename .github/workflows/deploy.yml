name: Deploy to AWS EC2 with ECR

on:
  push:
    branches:
      - main  # Modify if using a different branch for deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION_NAME }}

      - name: Authenticate to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION_NAME }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_NAME }}.amazonaws.com

      - name: Build & Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_NAME }}.amazonaws.com
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_KEY }}
          GITHUB_SSH_PRIVATE_KEY: ${{ secrets.GIT_PRIVATE_KEY }}

        run: |
          # Create SSH key file
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem

          # Create SSH key file for GitHub (use the private key for authentication)
          echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Set up known hosts to avoid SSH fingerprint issues
          ssh-keyscan github.com >> ~/.ssh/known_hosts

          # Go to your app directory
          cd michel

          # Pull the latest code from GitHub using SSH
          git pull origin main

          # Connect to EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            aws ecr get-login-password --region ${{ secrets.AWS_REGION_NAME }} | \
            docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_NAME }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION_NAME }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
            docker-compose -f docker-compose.yml down
            docker-compose -f docker-compose.yml up -d
          EOF

